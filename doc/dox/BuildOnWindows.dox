/**

\page BuildOnWindows Building and Running Tundra on Windows 

This page describes the necessary steps for building Tundra from the sources on Windows.

\section Prereqs Prerequisites

<ol>
<li>Tundra uses CMake as its build system. Download the latest CMake from <a href="http://www.cmake.org/">http://www.cmake.org/</a>.</li>
<li>Visual Studio 2008 and 2010 (Standard, Pro or Express) are officially supported. Make sure Visual Studio 2008/2010 are patched up to Service Pack 1.</li>
<li>Obtain the Tundra source code from the <a href="https://github.com/realXtend/naali/">realXtend Naali online repository</a> at GitHub. Install the <a href="http://git-scm.com/">Git</a> SCM software and clone the repository on to your local computer.</li> <b>Switch to the <i>tundra2</i> branch in that repository.</b> This folder will be referred to later as <i>C:/TundraGitTrunk/</i>.
</li>

 </ol>

 \section Deps Building dependencies

<ol>
<li>Due to the large amount of possible build configurations, the offically supported way of satisfying Tundra's third-party library dependencies is building them all on the development machine. This process involves building eg. the Qt library, and may take several hours.
<li>To build the Tundra dependencies, open a Visual Studio command prompt that matches the architecture you will be building for (Visual Studio Command Prompt for 32-bit builds, Visual Studio Win64 Command Prompt for 64-bit builds), navigate to <i>C:/TundraGitTrunk/tools/Windows</i>, then to a subdirectory matching your Visual Studio version (<i>VS2008</i> or <i>VS2010</i>), then execute either BuildDeps_<configuration>.cmd (32-bit) or BuildDepsX64_<configurationname>.cmd (64-bit). RelWithDebInfo configuration is recommended for getting started on development. The Debug dependencies then need to be built separately.
<li>When the command file is run, it will prompt for additional software prerequisites needed for successful build of the dependencies, among them SVN with command line tools, Mercurial, and Perl. Make sure these are satisfied before proceeding.
<li>The command file downloads dependency packages, then builds them, so make sure your Internet connection is functional. After a while you will be prompted for Qt's license agreement, press 'Y' when prompted.
<li>If there are errors during the dependency build, try running BuildDeps_<configurationname>.cmd or BuildDepsX64_<configurationname>.cmd again.
</ol>

 \section SettingUp Setting up the Build

<ol>
  <li>After the dependency build is complete, you can run CMake to generate the Tundra solution file. Run one of the CMake batch files from <i>C:/TundraGitTrunk</i> that matches your Visual Studio version and target architecture (CMake_VS2008.bat for a 32-bit Visual Studio 2008 build.)
  <li>Tundra is based on a modular architecture. To be able to support applications with different features, the features are implemented in modules. The file CMakeBuildConfigTemplate.txt contains the default build settings. When CMake is run for the first time, this file is copied to CMakeBuildConfig.txt, which defines the build settings local to your system. Whenever you make changes to CMakeBuildConfig.txt, cmake has to be rerun.</li>
  </ol>
  
  \section BuildingTundra Building and Running Tundra   

Open the generated .sln file, choose the configuration that you built the dependencies for (for example RelWithDebInfo) and do a full build. After finishing, two executables <b>Tundra.exe</b> and <b>TundraConsole.exe</b> (or <b>Tundrad.exe</b> and <b>TundraConsoled.exe</b> for Debug configuration) will be generated to the folder <i>C:/TundraGitTrunk/bin/</i>. All the built modules will be placed to the folder <i>C:/TundraGitTrunk/bin/plugins</i>. The debug builds of modules will have the <b>...d.dll</b> suffix.

  \section RebuildingTundra How to Make a Rebuild
  
Performing incremental builds of the .sln file operates just like normal in Visual Studio. However, an incremental build is sometimes not enough after pulling new commits from the repository, due to the following reasons:

<ul>
<li>If the CMakeBuildConfigTemplate.txt file changes, the changes will not automatically be propagated into your custom CMakeBuildConfig.txt file. When the repository changes the template file, be sure to manually move these changes (if you are interested in them) to your config file as well. Another way is to just delete CMakeBuildConfig.txt and have CMake generate a clean copy of the CMakeBuildConfigTemplate.txt for you.
<li>If you add new files to the solution, or if new .cpp files are added to the repository, the CMake build macro in Visual Studio doesn't automatically detect that CMake needs to be rerun. In this case, run CMake manually. Forgetting this step is usually benign, as you will most likely get linker errors for the missing .cpp file. Similarly, if files get deleted or renamed, CMake needs to be manually rerun.  
<li>If you remove any module .dlls from being built in your CMakeBuildConfig.txt or if a name of a module changes in the repository, be sure to also delete the corresponding .dll & .xml files in the /bin/modules/core/ folder, or otherwise Tundra will load the old .dll versions at start up (usually causing a very noticeable crash if they got out of sync). In the tundrajj branch, the modules are located in the folder /bin/plugins/.
<li>If you change any <i>add_definitions(-Dxxx)</i> flags in the CMake configuration, you will need to do a full rebuild of all the projects that were affected. At least VS2008 fails to catch this automatically, if the project uses a PCH file.
<li>Normally CMake caches the solution generation settings to CMakeCache.txt and the CMakeFiles/ folder. If you change an environment variable or some other system settings, or want to produce an absolutely guaranteed clean rebuild from scratch, delete CMakeCache.txt and rerun CMake (Experience suggests deleting the CMakeFiles/ folder is not necessary, as deleting CMakeCache.txt seems to cause a regeneration of this whole folder, but it doesn't hurt either). This will cause CMake to re-identify the build environment.     
<li>As a part of the Qt compilation process, files of the form <i>moc_filename.cxx</i> and <i>moc_filename.cxx_parameters</i> get automatically generated. If you switch between project configurations (Debug, RelWithDebInfo, Release), you will need to *always* make a full rebuild, since Qt has a limitation that it doesn't generate separately named moc files for all individual project configurations. If you often switch between Debug and Release builds, the recommended solution is to clone the git repository in two separate directories.
</ul>

  \section OpeningScenes Opening a Scene
 
The prebuilt installers come with registered context menu handlers for <b>.txml</b> and <b>.tbin</b> files. For a development build, these need to be registered manually. For information about that, see help on \ref TundraDocumentfiles "Tundra Document Files". Alternatively, use the command-line parameters to specify the scene to load. These are documented on the page \ref TundraCommandLineOptions "Command line options". 

  \section PreparingAnInstaller How to Generate an Installer

  The Tundra repository comes with premade installer scripts for the NSIS system.
   
<h4>Prerequisites:</h4>
<ul>
<li>Have Nullsoft Scriptable Install System (NSIS) from http://nsis.sourceforge.net/ installed. </li>
<li>Have a working Tundra build in your <i>C:/TundraGitTrunk/bin</i> directory. </li>
</ul>

<h4>Steps:</h4>
<li>Ensure that you do not have unnecessary files in your viewer "bin" directory. Own configuration files and compiled Python (.pyc) files are OK, they will be deleted by makebuild.bat.</li>
<li>Execute makebuild.bat and makeclean.bat from <i>C:/TundraGitTrunk/tools/Windows/Installer</i> This creates a "build" directory for NSIS to work from, with everything copied.</li>
<li>Execute the NSIS script (tundra-installer.nsi) and let it package the Tundra installer.</li>
<li>You are now done. The generated installer should appear in the Installer directory. </li>
</ol>

<p>If you want to change the version identifier of Tundra, you must change it in the following file:
<ol>
<li>src/Core/TundraCore/Framework/Application.cpp
<li>tundra-installer.nsi
</ol>
	
<p>If you want to set an icon for your installer file:
<ol><li>Add icon resource to viewer project: right-click the viewer project, Add->Resource, Import bin/data/ui/images/tundra_icon.ico file
<li>Rebuild viewer project
</ol>

<b>! Make sure that you do not commit any of the customized changes to the installer files back to the repository ! </b>
</ol>

 */