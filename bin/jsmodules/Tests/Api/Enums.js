// For conditions of distribution and use, see copyright notice in LICENSE

console.LogInfo("\n---------- Enums.js begin ----------\n");
console.LogInfo("LogChannelError: " + LogChannelError);
console.LogInfo("LogChannelWarning: " + LogChannelWarning);
console.LogInfo("LogChannelInfo: " + LogChannelInfo);
console.LogInfo("LogChannelDebug: " + LogChannelDebug);
console.LogInfo("LogLevelQuiet: " + LogLevelQuiet);
console.LogInfo("LogLevelErrorsOnly: " + LogLevelErrorsOnly);
console.LogInfo("LogLevelErrorWarning: " + LogLevelErrorWarning);
console.LogInfo("LogLevelErrorWarnInfo: " + LogLevelErrorWarnInfo);
console.LogInfo("LogLevelErrorWarnInfoDebug: " + LogLevelErrorWarnInfoDebug);
console.LogInfo("");
console.LogInfo("AttributeChange.Default.value: " + AttributeChange.Default.value);
console.LogInfo("AttributeChange.Disconnected.value: " + AttributeChange.Disconnected.value);
console.LogInfo("AttributeChange.LocalOnly.value: " + AttributeChange.LocalOnly.value);
console.LogInfo("AttributeChange.Replicate.value: " + AttributeChange.Replicate.value);
console.LogInfo("");
console.LogInfo("EntityAction.Invalid: " + EntityAction.Invalid);
console.LogInfo("EntityAction.Local: " + EntityAction.Local);
console.LogInfo("EntityAction.Server: " + EntityAction.Server);
console.LogInfo("EntityAction.Peers: " + EntityAction.Peers);
console.LogInfo("");
console.LogInfo("MouseEvent.NoButton: " + MouseEvent.NoButton);
console.LogInfo("MouseEvent.LeftButton: " + MouseEvent.LeftButton);
console.LogInfo("MouseEvent.RightButton: " + MouseEvent.RightButton);
console.LogInfo("MouseEvent.MiddleButton: " + MouseEvent.MiddleButton);
console.LogInfo("MouseEvent.Button4: " + MouseEvent.Button4);
console.LogInfo("MouseEvent.Button5: " + MouseEvent.Button5);
console.LogInfo("MouseEvent.MaxButtonMask: " + MouseEvent.MaxButtonMask);
console.LogInfo("");
console.LogInfo("MouseEvent.MouseEventInvalid: " + MouseEvent.MouseEventInvalid);
console.LogInfo("MouseEvent.MouseMove: " + MouseEvent.MouseMove);
console.LogInfo("MouseEvent.MouseScroll: " + MouseEvent.MouseScroll);
console.LogInfo("MouseEvent.MousePressed: " + MouseEvent.MousePressed);
console.LogInfo("MouseEvent.MouseReleased: " + MouseEvent.MouseReleased);
console.LogInfo("MouseEvent.MouseDoubleClicked: " + MouseEvent.MouseDoubleClicked);
console.LogInfo("");
console.LogInfo("MouseEvent.PressOriginNone: " + MouseEvent.PressOriginNone);
console.LogInfo("MouseEvent.PressOriginScene: " + MouseEvent.PressOriginScene);
console.LogInfo("MouseEvent.PressOriginQtWidget: " + MouseEvent.PressOriginQtWidget);
console.LogInfo("");
console.LogInfo("KeyEvent.KeyEventInvalid: " + KeyEvent.KeyEventInvalid);
console.LogInfo("KeyEvent.KeyPressed: " + KeyEvent.KeyPressed);
console.LogInfo("KeyEvent.KeyDown: " + KeyEvent.KeyDown);
console.LogInfo("KeyEvent.KeyReleased: " + KeyEvent.KeyReleased);
console.LogInfo("");
console.LogInfo("GestureEvent.GestureInvalid: " + GestureEvent.GestureInvalid);
console.LogInfo("GestureEvent.GestureStarted: " + GestureEvent.GestureStarted);
console.LogInfo("GestureEvent.GestureUpdated: " + GestureEvent.GestureUpdated);
console.LogInfo("GestureEvent.GestureFinished: " + GestureEvent.GestureFinished);
console.LogInfo("GestureEvent.GestureCanceled: " + GestureEvent.GestureCanceled);
console.LogInfo("");
console.LogInfo("SoundChannel.Stopped: " + SoundChannel.Stopped);
console.LogInfo("SoundChannel.Pending: " + SoundChannel.Pending);
console.LogInfo("SoundChannel.Playing: " + SoundChannel.Playing);
console.LogInfo("");
console.LogInfo("SoundChannel.Triggered: " + SoundChannel.Triggered);
console.LogInfo("SoundChannel.Ambient: " + SoundChannel.Ambient);
console.LogInfo("SoundChannel.Voice: " + SoundChannel.Voice);
console.LogInfo("");
console.LogInfo("AssetAPI.FileQueryLocalFileFound: " + AssetAPI.FileQueryLocalFileFound);
console.LogInfo("AssetAPI.FileQueryLocalFileMissing: " + AssetAPI.FileQueryLocalFileMissing);
console.LogInfo("AssetAPI.FileQueryExternalFile: " + AssetAPI.FileQueryExternalFile);
console.LogInfo("");
console.LogInfo("AssetAPI.AssetRefInvalid: " + AssetAPI.AssetRefInvalid);
console.LogInfo("AssetAPI.AssetRefLocalPath: " + AssetAPI.AssetRefLocalPath);
console.LogInfo("AssetAPI.AssetRefRelativePath: " + AssetAPI.AssetRefRelativePath);
console.LogInfo("AssetAPI.AssetRefLocalUrl: " + AssetAPI.AssetRefLocalUrl);
console.LogInfo("AssetAPI.AssetRefExternalUrl: " + AssetAPI.AssetRefExternalUrl);
console.LogInfo("AssetAPI.AssetRefNamedStorage: " + AssetAPI.AssetRefNamedStorage);
console.LogInfo("");
console.LogInfo("IAsset.Original: " + IAsset.Original);
console.LogInfo("IAsset.Cached: " + IAsset.Cached);
console.LogInfo("IAsset.Programmatic: " + IAsset.Programmatic);
console.LogInfo("IAsset.Bundle: " + IAsset.Bundle);
console.LogInfo("");
console.LogInfo("IAssetStorage.AssetCreate: " + IAssetStorage.AssetCreate);
console.LogInfo("IAssetStorage.AssetModify: " + IAssetStorage.AssetModify);
console.LogInfo("IAssetStorage.AssetDelete: " + IAssetStorage.AssetDelete);
console.LogInfo("");
console.LogInfo("IAssetStorage.StorageUntrusted: " + IAssetStorage.StorageUntrusted);
console.LogInfo("IAssetStorage.StorageTrusted: " + IAssetStorage.StorageTrusted);
console.LogInfo("IAssetStorage.StorageAskTrust: " + IAssetStorage.StorageAskTrust);
console.LogInfo("\n---------- Enums.js end ----------\n");
